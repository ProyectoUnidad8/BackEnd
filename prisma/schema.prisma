generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model PetAdoption {
  id           Int           @id @default(autoincrement())
  name         String
  breed        String?
  age          Int?
  gender       String
  description  String?
  category     String
  url_image    String        @default("https://goo.su/crhQ")
  isAdopted    Boolean       @default(false)
  createdAt    DateTime      @default(now())
  update_at    DateTime      @updatedAt

  applications Application[]
}

model Application {
  id            Int         @id @default(autoincrement())
  name          String
  description   String
  phone         String
  dni           String
  status        Boolean     @default(false)
  createdAt     DateTime    @default(now())
  update_at     DateTime    @updatedAt

  applicationId Int
  application   PetAdoption @relation(fields: [applicationId], references: [id])
}

model Profile {
  id         String   @id
  email      String   @unique
  name       String?
  createdAt  DateTime @default(now())
  update_at  DateTime @updatedAt

  userId     Int?     @unique
  user       Usuario?
}

model Usuario {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  password   String   @default("123456")
  name       String?
  createdAt  DateTime @default(now())
  update_at  DateTime @updatedAt

  role       Role     @default(USER)
  pet        Pet[]
  profileId  String?  @unique
  profile    Profile? @relation(fields: [profileId], references: [id])
}

model Pet {
  id          Int         @id @default(autoincrement())
  name        String
  breed       String?
  age         Int?
  gender      String
  description String?
  numberChip  String?
  category    String
  url_image   String      @default("https://goo.su/XQImvpd")
  createdAt   DateTime    @default(now())
  update_at   DateTime    @updatedAt

  ownerId     Int
  diagnostic  Diagnostic[]
  owner       Usuario     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Diagnostic {
  id         Int      @id @default(autoincrement())
  symptoms   String
  medication String
  createdAt  DateTime @default(now())
  update_at  DateTime @updatedAt

  petId      Int
  pet        Pet      @relation(fields: [petId], references: [id])
}

enum Role {
  ADMIN
  USER
  AUX
}